/**
 * gotpl
 * https://github.com/Lanfei/gotpl
 * @author  Jealous
 * @license MIT
 */
!function(global){"use strict";var fs,path,gotpl={config:function(options){"object"==typeof options?merge(defOpts,options):2===arguments.length&&(defOpts[arguments[0]]=arguments[1])},render:function(template,data,options){var compiled=tplCache[template];compiled||(options=merge({},defOpts,options),compiled=compile(template,data,options),options.cache&&!options.debug&&(tplCache[template]=compiled));try{return compiled(data)}catch(e){throw tplCache[template]=null,e}},renderFile:function(path,data,options,next){var args=Array.prototype.slice.call(arguments);next=args.pop(),path=args.shift(),data=args.shift(),options=args.shift(),(fs=fs||require("fs")).readFile(path,function(err,buffer){if(err)next(err);else try{next(null,renderByPath(path,buffer.toString(),data,options))}catch(err){next(err)}})},renderFileSync:renderFileSync,compile:compile,version:"6.0.0"},defOpts={root:"",debug:!1,cache:!0,minify:!0,openTag:"<%",closeTag:"%>"},hasDefine="function"==typeof define,hasExports="undefined"!=typeof module&&module.exports,ESCAPE_MAP={"<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","&":"&#38;"},LINE_RE=/\r?\n/g,INDENT_RE=/[\r\n]+([\f\t\v]*)/g,ESCAPE_RE=/(['\\])/g,TYPEOF_RE=/typeof ([$\w]+)/g,tplCache={},fileCache={};function merge(target,objects){target=target||{};for(var i=1,l=arguments.length;i<l;++i){var object=arguments[i];object&&Object.keys(object).forEach(function(key){target[key]=object[key]})}return target}function resolvePath(filename,base){return(path=path||require("path")).isAbsolute(filename)||(base=base?path.resolve(base):defOpts.root,path.extname(base)&&(base=path.dirname(base)),filename=path.join(base,filename)),path.extname(filename)||(filename+=".tpl"),filename}function renderByPath(path,template,data,options){if(!hasExports)throw new Error("Please use `render` instead in browser environment.");var filename=resolvePath(path,(options=merge({},defOpts,options)).filename||options.root),compiled=fileCache[filename];compiled||(fs=fs||require("fs"),options.filename=filename,compiled=compile(template=template||fs.readFileSync(filename).toString(),data,options),options.cache&&!options.debug&&(fileCache[filename]=compiled));try{return compiled(data)}catch(e){throw fileCache[filename]=null,e}}function renderFileSync(path,data,options){return renderByPath(path,null,data,options)}function compile(template,data,options){data=merge({},data),options=merge({},defOpts,options);var lines=1,debug=options.debug,minify=options.minify,openTag=options.openTag,closeTag=options.closeTag,codes="return function(__data__){\n'use strict'\n";for(var key in codes+=debug?"try{var $$line=1,":"var ",template.replace(TYPEOF_RE,function(_,$1){data[$1]=data[$1]||void 0}),data)codes+=key+"=__data__['"+key+"'],";return codes+="$$res=''\n",template.split(closeTag).forEach(function(segment){var logicCode,split=segment.split(openTag),html=split[0],logic=split[1];if(html){var htmlCode=function(codes){return"$$res+='"+codes.replace(ESCAPE_RE,"\\$1")+"'"}(html);htmlCode=minify?htmlCode.replace(INDENT_RE,"\\n"):htmlCode.replace(INDENT_RE,"\\n$1"),codes+=htmlCode+"\n",debug&&(lines+=html.split(LINE_RE).length-1,codes+="$$line="+lines+";\t")}logic&&(logicCode=0===logic.indexOf("=")?parseValue(logic.slice(1),!0):0===logic.indexOf("-")?parseValue(logic.slice(1)):logic.trim(),codes+=logicCode+"\n",debug&&(lines+=logic.split(LINE_RE).length-1,codes+="$$line="+lines+";\t"))}),codes+="return $$res",codes+=debug?"\n}catch(e){\n$$rethrow(e, $$template, $$line)\n}\n}":"\n}",new Function("$$template, $$escape, $$rethrow, include",codes)(template,escapeHTML,rethrow,function(path,subData,subOptions){return renderFileSync(path,subData=merge({},data,subData),subOptions=merge({},options,subOptions))})}function parseValue(codes,escape){return escape&&(codes="$$escape("+codes.trim()+")"),"$$res+=("+codes+")"}function escapeChar(char){return ESCAPE_MAP[char]}function escapeHTML(value){return(value+"").replace(/&(?![\w#]+;)|[<>"']/g,escapeChar)}function rethrow(err,template,line){var lines=template.split(LINE_RE),start=Math.max(line-3,0),end=Math.min(lines.length,line+3);throw err.message+="\n\n"+lines.slice(start,end).map(function(codes,i){var curLine=start+i+1;return(curLine===line?" >> ":"    ")+curLine+"| "+codes}).join("\n")+"\n",err}hasExports?module.exports=gotpl:hasDefine?define(gotpl):global.gotpl=gotpl}(this);